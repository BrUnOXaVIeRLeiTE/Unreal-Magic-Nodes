//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///			Copyright 2020 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "Modules/ModuleManager.h"

#include "IDetailCustomization.h"
#include "IPropertyChangeListener.h"

#include "Framework/MultiBox/MultiBoxBuilder.h"
#include "Framework/MultiBox/MultiBoxExtender.h"
#include "Editor/LevelEditor/Public/LevelEditor.h"
#include "Runtime/Slate/Public/Widgets/Docking/SDockTab.h"

#include "ISettingsModule.h"
#include "ISettingsSection.h"
#include "ISettingsContainer.h"
#include "Toolkits/AssetEditorToolkit.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define LOCTEXT_NAMESPACE "Synaptech"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static const FName TABSV("TAB_SourceViewer");
static const FName TABSS("TAB_SourceSearch");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class IMagicNodeEditor : public IModuleInterface {
public:
	static inline IMagicNodeEditor &Get() {return FModuleManager::LoadModuleChecked<IMagicNodeEditor>("MagicNodeEditor");}
	static inline bool IsAvailable() {return FModuleManager::Get().IsModuleLoaded("MagicNodeEditor");}
public:
	virtual TSharedPtr<FExtensibilityManager>GetMagicNodeEditorToolBarExtensibilityManager() {return nullptr;}
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class FMagicNodeEditor : public IMagicNodeEditor {
private:
	TSharedPtr<FExtender>MenuExtender;
	TSharedPtr<FExtender>MainMenuExtender;
	TSharedPtr<FExtensibilityManager>ToolBarExtensibilityManager;
private:
	TSharedRef<SDockTab>OnSpawnSourceCodeViewerTAB(const FSpawnTabArgs &SpawnTabArgs);
	TSharedRef<SDockTab>OnSpawnSourceCodeSearchTAB(const FSpawnTabArgs &SpawnTabArgs);
public:
	virtual void StartupModule() override;
	virtual void ShutdownModule() override;
	virtual bool SupportsDynamicReloading() override {return false;}
public:
	virtual TSharedPtr<FExtensibilityManager>GetMagicNodeEditorToolBarExtensibilityManager() override {return ToolBarExtensibilityManager;}
public:
	//static void ExtendMenu(FMenuBuilder &MenuBuilder);
	static void ExtendMainMenu(FMenuBuilder &MenuBuilder);
public:
	static void InvokeSourceCodeViewerTAB(const FTextLocation &Location);
	static void InvokeSourceCodeSearchTAB();
	static void CreateNewScriptAsset();
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef LOCTEXT_NAMESPACE

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////